"""
üñ•Ô∏è –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è HH.ru –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
"""

from ..core.job_application_manager import JobApplicationManager
from ..config.settings import settings, ResumeFileManager, UIFormatter


class CLIInterface:
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""

    @staticmethod
    def print_welcome():
        """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        print("üöÄ HH.ru –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–Ø v2.0")
        print(UIFormatter.create_separator())
        print("üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è")
        print("ü§ñ –° –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Gemini AI")
        print("üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—é–º–µ –∏–∑ —Ñ–∞–π–ª–æ–≤")
        print(UIFormatter.create_separator())

    @staticmethod
    def print_settings_info():
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö"""
        print("\n‚öôÔ∏è –¢–ï–ö–£–©–ò–ï –ù–ê–°–¢–†–û–ô–ö–ò:")
        print(f"üîç –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {settings.hh_search.keywords}")
        print(f"üìä –ú–∞–∫—Å–∏–º—É–º –∑–∞—è–≤–æ–∫: {settings.application.max_applications}")
        print(
            f"ü§ñ Gemini AI: "
            f"{'‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' if settings.enable_ai_matching() else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}"
        )
        print(f"üåê –†–µ–∂–∏–º –±—Ä–∞—É–∑–µ—Ä–∞: " f"{'–§–æ–Ω–æ–≤—ã–π' if settings.browser.headless else '–í–∏–¥–∏–º—ã–π'}")

    @staticmethod
    def get_user_preferences():
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print("\nüéØ –ù–ê–°–¢–†–û–ô–ö–ê –ü–û–ò–°–ö–ê:")

        keywords = input(f"–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ [{settings.hh_search.keywords}]: ").strip()
        if not keywords:
            keywords = settings.hh_search.keywords

        use_ai = True
        if settings.enable_ai_matching():
            ai_choice = input("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å AI —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é? [y/n]: ").lower()
            use_ai = ai_choice != "n"
        else:
            print("‚ö†Ô∏è AI —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–Ω–µ—Ç GEMINI_API_KEY)")
            use_ai = False

        max_apps_input = input(
            f"–ú–∞–∫—Å–∏–º—É–º –∑–∞—è–≤–æ–∫ [{settings.application.max_applications}]: "
        ).strip()
        try:
            max_apps = (
                int(max_apps_input) if max_apps_input else settings.application.max_applications
            )
        except ValueError:
            max_apps = settings.application.max_applications

        return keywords, use_ai, max_apps

    @staticmethod
    def print_final_stats(stats):
        """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        UIFormatter.print_section_header("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:", long=True)

        if "error" in stats:
            print(f"‚ùå –û—à–∏–±–∫–∞: {stats['error']}")
        else:
            print(f"üìù –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {stats['total_applications']}")
            print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {stats['successful']}")
            print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {stats['failed']}")

            if stats["successful"] > 0:
                print(f"\nüéâ –û—Ç–ª–∏—á–Ω–æ! –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {stats['successful']} –∑–∞—è–≤–æ–∫!")
            else:
                print("\nüòï –ó–∞—è–≤–∫–∏ –Ω–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")

        print(UIFormatter.create_separator(long=True))

    @staticmethod
    def run_application():
        """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            cli = CLIInterface()

            cli.print_welcome()
            ResumeFileManager.create_sample_files()
            cli.print_settings_info()
            keywords, use_ai, max_apps = cli.get_user_preferences()

            settings.update_search_keywords(keywords)
            settings.application.max_applications = max_apps

            print("\nüéØ –ó–ê–ü–£–°–ö –° –ü–ê–†–ê–ú–ï–¢–†–ê–ú–ò:")
            print(f"üîç –ü–æ–∏—Å–∫: {keywords}")
            print(f"ü§ñ AI: {'–í–∫–ª—é—á–µ–Ω' if use_ai else '–û—Ç–∫–ª—é—á–µ–Ω'}")
            print(f"üìä –ú–∞–∫—Å–∏–º—É–º –∑–∞—è–≤–æ–∫: {max_apps}")

            confirm = input("\n–ù–∞—á–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é? [y/n]: ").lower()
            if confirm != "y":
                print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                return

            manager = JobApplicationManager()
            stats = manager.run_automation(keywords=keywords, use_ai=use_ai)
            cli.print_final_stats(stats)

        except KeyboardInterrupt:
            print("\n‚èπÔ∏è –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
