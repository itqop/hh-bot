import logging
from typing import List, Dict, Optional
import time

from ..config.settings import settings, AppConstants, UIFormatter
from ..config.logging_config import LoggingConfigurator
from ..models.vacancy import Vacancy, ApplicationResult
from ..services.hh_api_service import HHApiService
from ..services.gemini_service import GeminiAIService
from ..services.browser_service import BrowserService

logger = logging.getLogger(__name__)


class AutomationOrchestrator:
    """–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""

    def __init__(self):
        self.api_service = HHApiService()
        self.browser_service = BrowserService()
        self.ai_service = None

    def _get_ai_service(self):
        if self.ai_service is None:
            self.ai_service = GeminiAIService()
        return self.ai_service

    def execute_automation_pipeline(
        self, keywords: Optional[str] = None, use_ai: bool = True
    ) -> Dict:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
        try:

            vacancies = self._search_and_filter_vacancies(keywords)
            if not vacancies:
                return {"error": "–ü–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"}

            if use_ai and self._get_ai_service().is_available():
                vacancies = self._ai_filter_vacancies(vacancies)
                if not vacancies:
                    return {"error": "–ü–æ—Å–ª–µ AI —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π –Ω–µ—Ç"}

            init_ok = self._initialize_browser_and_auth()
            if not init_ok:
                return {"error": "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –∏–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"}

            application_results = self._apply_to_vacancies(vacancies)

            return self._create_stats(application_results)

        except KeyboardInterrupt:
            logger.info("–ü—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return {"error": "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"}
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            return {"error": str(e)}
        finally:
            self._cleanup()

    def _search_and_filter_vacancies(
        self, keywords: Optional[str] = None
    ) -> List[Vacancy]:
        """–ü–æ–∏—Å–∫ –∏ –±–∞–∑–æ–≤–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤–∞–∫–∞–Ω—Å–∏–π"""
        logger.info("üîç –≠–¢–ê–ü 1: –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π")

        try:
            all_vacancies = self.api_service.search_vacancies(keywords)
            if not all_vacancies:
                logger.warning("–í–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —á–µ—Ä–µ–∑ API")
                return []

            suitable_vacancies = self.api_service.filter_suitable_vacancies(
                all_vacancies, search_keywords=keywords or ""
            )

            self._log_search_results(all_vacancies, suitable_vacancies)
            return suitable_vacancies

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π: {e}")
            return []

    def _ai_filter_vacancies(self, vacancies: List[Vacancy]) -> List[Vacancy]:
        """AI —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤–∞–∫–∞–Ω—Å–∏–π"""
        logger.info("ü§ñ –≠–¢–ê–ü 2: AI –∞–Ω–∞–ª–∏–∑ –≤–∞–∫–∞–Ω—Å–∏–π")

        ai_suitable = []
        total_count = len(vacancies)

        for i, vacancy in enumerate(vacancies, 1):
            truncated_name = UIFormatter.truncate_text(vacancy.name)
            logger.info(f"–ê–Ω–∞–ª–∏–∑ {i}/{total_count}: {truncated_name}...")

            try:
                if self._get_ai_service().should_apply(vacancy):
                    ai_suitable.append(vacancy)
                    logger.info("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç–∫–ª–∏–∫–∞")
                else:
                    logger.info("‚ùå –ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è")

                if i < total_count:
                    time.sleep(AppConstants.AI_REQUEST_PAUSE)

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞: {e}")
                ai_suitable.append(vacancy)

        self._log_ai_results(total_count, ai_suitable)
        return ai_suitable

    def _initialize_browser_and_auth(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"""
        logger.info("üåê –≠–¢–ê–ü 3: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")

        try:
            if not self.browser_service.initialize():
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä")
                return False

            if not self.browser_service.authenticate_interactive():
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
                return False

            logger.info("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False

    def _apply_to_vacancies(self, vacancies: List[Vacancy]) -> List[ApplicationResult]:
        max_successful_apps = settings.application.max_applications

        logger.info(
            f"üì® –≠–¢–ê–ü 4: –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–æ–∫ (–º–∞–∫—Å–∏–º—É–º {max_successful_apps} —É—Å–ø–µ—à–Ω—ã—Ö)"
        )
        logger.info("üí° –ú–µ–∂–¥—É –∑–∞—è–≤–∫–∞–º–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –ø–∞—É–∑—ã")
        logger.info("üí° –õ–∏–º–∏—Ç —Å—á–∏—Ç–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ —É—Å–ø–µ—à–Ω—ã–º –∑–∞—è–≤–∫–∞–º")

        application_results = []
        successful_count = 0
        processed_count = 0

        for vacancy in vacancies:
            if successful_count >= max_successful_apps:
                logger.info(
                    f"üéØ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞—è–≤–æ–∫: {max_successful_apps}"
                )
                break

            processed_count += 1
            truncated_name = UIFormatter.truncate_text(vacancy.name, medium=True)
            logger.info(
                f"–û–±—Ä–∞–±–æ—Ç–∫–∞ {processed_count}: {truncated_name} "
                f"(—É—Å–ø–µ—à–Ω—ã—Ö: {successful_count}/{max_successful_apps})"
            )

            try:
                result = self.browser_service.apply_to_vacancy(vacancy)
                application_results.append(result)
                self._log_application_result(result)

                if result.success:
                    successful_count += 1
                    logger.info(
                        f"   üéâ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞—è–≤–æ–∫: "
                        f"{successful_count}/{max_successful_apps}"
                    )

                if (
                    processed_count < len(vacancies)
                    and successful_count < max_successful_apps
                ):
                    self.browser_service.add_random_pause()

            except Exception as e:
                logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∞—á–µ –∑–∞—è–≤–∫–∏: {e}")
                error_result = ApplicationResult(
                    vacancy_id="",
                    vacancy_name=vacancy.name,
                    success=False,
                    error_message=str(e),
                )
                application_results.append(error_result)

        logger.info(
            f"üèÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π: {processed_count}, "
            f"—É—Å–ø–µ—à–Ω—ã—Ö –∑–∞—è–≤–æ–∫: {successful_count}"
        )
        return application_results

    def _log_search_results(
        self, all_vacancies: List[Vacancy], suitable: List[Vacancy]
    ):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
        logger.info("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –±–∞–∑–æ–≤–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:")
        logger.info(f"   üîç –í—Å–µ–≥–æ: {len(all_vacancies)}")
        logger.info(f"   ‚úÖ –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö: {len(suitable)}")
        if len(all_vacancies) > 0:
            percentage = UIFormatter.format_percentage(
                len(suitable), len(all_vacancies)
            )
            logger.info(f"   üìà % —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è: {percentage}")

    def _log_ai_results(self, total_analyzed: int, ai_suitable: List[Vacancy]):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ AI –∞–Ω–∞–ª–∏–∑–∞"""
        logger.info("üéØ AI —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
        logger.info(f"   ü§ñ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {total_analyzed}")
        logger.info(f"   ‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ: {len(ai_suitable)}")
        if total_analyzed > 0:
            percentage = UIFormatter.format_percentage(len(ai_suitable), total_analyzed)
            logger.info(f"   üìà % –æ–¥–æ–±—Ä–µ–Ω–∏—è: {percentage}")

    def _log_application_result(self, result: ApplicationResult):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏"""
        if result.success:
            logger.info("   ‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        elif result.already_applied:
            logger.info("   ‚ö†Ô∏è –£–∂–µ –æ—Ç–∫–ª–∏–∫–∞–ª–∏—Å—å —Ä–∞–Ω–µ–µ")
        elif result.skipped:
            logger.warning(f"   ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: {result.error_message}")
        else:
            logger.warning(f"   ‚ùå –û—à–∏–±–∫–∞: {result.error_message}")

    def _create_stats(self, application_results: List[ApplicationResult]) -> Dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        total_applications = len(application_results)
        successful = sum(1 for r in application_results if r.success)
        already_applied = sum(1 for r in application_results if r.already_applied)
        skipped = sum(1 for r in application_results if r.skipped)
        failed = total_applications - successful - already_applied - skipped

        return {
            "total_applications": total_applications,
            "successful": successful,
            "failed": failed,
            "already_applied": already_applied,
            "skipped": skipped,
        }

    def _cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        logger.info("üîí –ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞...")
        self.browser_service.close()


class JobApplicationManager:
    """–ì–ª–∞–≤–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–º –ø–æ–∏—Å–∫–∞ –∏ –æ—Ç–∫–ª–∏–∫–æ–≤ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏"""

    def __init__(self):

        LoggingConfigurator.setup_logging(
            log_file="logs/hh_bot.log", console_output=False
        )

        self.orchestrator = AutomationOrchestrator()
        self.application_results: List[ApplicationResult] = []

    def run_automation(
        self, keywords: Optional[str] = None, use_ai: bool = True
    ) -> Dict:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ HH.ru")
        print(UIFormatter.create_separator())

        stats = self.orchestrator.execute_automation_pipeline(keywords, use_ai)

        if "error" not in stats:
            self.application_results = []

        return stats

    def get_application_results(self) -> List[ApplicationResult]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫"""
        return self.application_results.copy()

    def print_detailed_report(self, stats: Dict) -> None:
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Ä–∞–±–æ—Ç–µ"""
        UIFormatter.print_section_header("üìä –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢", long=True)

        if "error" in stats:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {stats['error']}")
            return

        print(f"üìù –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫: {stats['total_applications']}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats['successful']}")
        print(f"‚ö†Ô∏è –£–∂–µ –æ—Ç–∫–ª–∏–∫–∞–ª–∏—Å—å —Ä–∞–Ω–µ–µ: {stats['already_applied']}")
        print(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (—Ç–µ—Å—Ç–æ–≤—ã–µ/–æ—à–∏–±–∫–∏): {stats['skipped']}")
        print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫: {stats['failed']}")

        if stats["total_applications"] > 0:
            success_rate = UIFormatter.format_percentage(
                stats["successful"], stats["total_applications"]
            )
            print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate}")

        print(UIFormatter.create_separator(long=True))

        if stats["successful"] > 0:
            print(f"üéâ –û—Ç–ª–∏—á–Ω–æ! –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {stats['successful']} –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫!")
            print("üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø—É—Å–∫–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é 2-3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å")
        elif stats["already_applied"] > 0:
            print("üí° –ù–∞ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π —É–∂–µ –ø–æ–¥–∞–≤–∞–ª–∏ –∑–∞—è–≤–∫–∏")
        else:
            print("üòï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –Ω–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
            print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
