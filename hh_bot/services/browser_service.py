import time
import random
import logging
import json
from typing import Optional
from pathlib import Path
from enum import Enum
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.common.exceptions import NoSuchElementException
from webdriver_manager.chrome import ChromeDriverManager

from ..config.settings import settings, AppConstants, UIFormatter
from ..models.vacancy import ApplicationResult

class SubmissionResult(Enum):
    SUCCESS = "success"
    FAILED = "failed" 
    SKIPPED = "skipped"

logger = logging.getLogger(__name__)


class SessionManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ HH.ru"""

    def __init__(self, driver: webdriver.Chrome):
        self.driver = driver
        self.session_dir = Path("session_data")
        self.cookies_file = self.session_dir / "hh_cookies.json"
        self.session_dir.mkdir(exist_ok=True)

    def save_session(self) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ –≤ —Ñ–∞–π–ª"""
        try:
            cookies = self.driver.get_cookies()
            session_data = {
                "cookies": cookies,
                "user_agent": self.driver.execute_script("return navigator.userAgent;"),
                "timestamp": time.time(),
            }

            with open(self.cookies_file, 'w', encoding='utf-8') as f:
                json.dump(session_data, f, indent=2, ensure_ascii=False)

            logger.info(f"–°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {self.cookies_file}")
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
            return False

    def load_session(self) -> bool:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏"""
        try:
            if not self.cookies_file.exists():
                logger.info("–§–∞–π–ª —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False

            with open(self.cookies_file, 'r', encoding='utf-8') as f:
                session_data = json.load(f)

            if not self._is_session_valid(session_data):
                logger.info("–°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞ –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞")
                return False

            self.driver.get(AppConstants.HH_SITE_URL)
            time.sleep(2)

            for cookie in session_data["cookies"]:
                try:
                    self.driver.add_cookie(cookie)
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å cookie: {e}")

            logger.info("–°–µ—Å—Å–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞")
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–∏: {e}")
            return False

    def clear_session(self) -> None:
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏"""
        try:
            if self.cookies_file.exists():
                self.cookies_file.unlink()
                logger.info("–°–µ—Å—Å–∏—è —É–¥–∞–ª–µ–Ω–∞")
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")

    def _is_session_valid(self, session_data: dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            session_age = time.time() - session_data.get("timestamp", 0)
            max_age = 7 * 24 * 3600  # 7 –¥–Ω–µ–π
            return session_age < max_age
        except Exception:
            return False


class BrowserInitializer:
    """–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±—Ä–∞—É–∑–µ—Ä–∞"""

    @staticmethod
    def create_chrome_options(headless: bool) -> Options:
        options = Options()

        if headless:
            options.add_argument("--headless")

        options.add_argument("--no-sandbox")
        options.add_argument("--disable-dev-shm-usage")
        options.add_argument("--disable-blink-features=AutomationControlled")
        options.add_argument("--disable-gpu")
        options.add_argument("--disable-features=VizDisplayCompositor")
        options.add_argument("--disable-web-security")
        options.add_argument("--disable-features=VoiceInteraction")
        options.add_argument("--disable-speech-api")
        options.add_argument("--disable-background-networking")
        options.add_argument("--disable-background-timer-throttling")
        options.add_argument("--disable-renderer-backgrounding")
        options.add_argument("--disable-backgrounding-occluded-windows")
        options.add_argument("--disable-client-side-phishing-detection")
        options.add_argument("--disable-sync")
        options.add_argument("--disable-translate")
        options.add_argument("--disable-ipc-flooding-protection")
        options.add_argument("--log-level=3")

        options.add_experimental_option("excludeSwitches", ["enable-automation"])
        options.add_experimental_option("useAutomationExtension", False)
        options.add_experimental_option("excludeSwitches", ["enable-logging"])
        options.add_experimental_option("excludeSwitches", ["disable-logging"])

        return options

    @staticmethod
    def hide_automation(driver: webdriver.Chrome) -> None:
        """–°–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
        try:
            driver.execute_script(
                """
                Object.defineProperty(navigator, 'webdriver', {
                    get: () => undefined
                });
            """
            )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫—Ä—ã—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏: {e}")


class AuthenticationHandler:
    """–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""

    LOGIN_URL = f"{AppConstants.HH_SITE_URL}/account/login"

    def __init__(self, driver: webdriver.Chrome):
        self.driver = driver
        self.session_manager = SessionManager(driver)

    def authenticate_interactive(self) -> bool:
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ HH.ru —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏"""
        try:
            print("\nüîê –ü–†–û–í–ï–†–ö–ê –°–û–•–†–ê–ù–ï–ù–ù–û–ô –°–ï–°–°–ò–ò")
            logger.info("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é...")
            
            if self.session_manager.load_session():
                self.driver.refresh()
                time.sleep(3)
                
                if self._check_authentication():
                    print("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è")
                    logger.info("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é —É—Å–ø–µ—à–Ω–∞!")
                    return True
                else:
                    print("‚ùå –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞")
                    logger.warning("–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞")
                    self.session_manager.clear_session()

            print("\nüîê –†–ï–ñ–ò–ú –†–£–ß–ù–û–ô –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò")
            print("1. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
            print("2. –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
            print("3. –°–µ—Å—Å–∏—è –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")

            logger.info("–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
            self.driver.get(self.LOGIN_URL)

            input("‚è≥ –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ Enter...")

            if self._check_authentication():
                logger.info("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
                
                if self.session_manager.save_session():
                    print("‚úÖ –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—É—Å–∫–æ–≤")
                else:
                    print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é")
                
                return True
            else:
                logger.error("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                return False

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False

    def _check_authentication(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        try:
            current_url = self.driver.current_url
            page_text = self.driver.page_source.lower()

            success_indicators = [
                "applicant" in current_url,
                "account" in current_url and "login" not in current_url,
                "–º–æ–∏ —Ä–µ–∑—é–º–µ" in page_text,
            ]

            return any(success_indicators)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False


class VacancyApplicator:
    """–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø–æ–¥–∞—á—É –∑–∞—è–≤–æ–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏"""

    APPLY_SELECTORS = [
        '[data-qa="vacancy-response-link-top"]',
        '[data-qa="vacancy-response-button"]',
        '.bloko-button[data-qa*="response"]',
        'button[data-qa*="response"]',
        ".vacancy-response-link",
        'a[href*="response"]',
    ]

    ALREADY_APPLIED_INDICATORS = [
        "–æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å",
        "–æ—Ç–∫–ª–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω",
        "–∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞",
        "response sent",
        "—É–∂–µ –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å",
        "—á–∞—Ç",
    ]

    def __init__(self, driver: webdriver.Chrome):
        self.driver = driver

    def apply_to_vacancy(
        self, vacancy_url: str, vacancy_name: str
    ) -> ApplicationResult:
        """–ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é"""
        try:
            truncated_name = UIFormatter.truncate_text(vacancy_name)
            logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤–∞–∫–∞–Ω—Å–∏–∏: {truncated_name}...")
            self.driver.get(vacancy_url)
            time.sleep(3)

            apply_button = self._find_apply_button()
            if not apply_button:
                return ApplicationResult(
                    vacancy_id="",
                    vacancy_name=vacancy_name,
                    success=False,
                    error_message="–ö–Ω–æ–ø–∫–∞ –æ—Ç–∫–ª–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                )

            button_text = apply_button.text.lower()
            if self._is_already_applied(button_text):
                return ApplicationResult(
                    vacancy_id="",
                    vacancy_name=vacancy_name,
                    success=False,
                    already_applied=True,
                    error_message="–£–∂–µ –æ—Ç–∫–ª–∏–∫–∞–ª–∏—Å—å –Ω–∞ —ç—Ç—É –≤–∞–∫–∞–Ω—Å–∏—é",
                )

            self.driver.execute_script("arguments[0].click();", apply_button)
            time.sleep(2)

            logger.info("–ö–Ω–æ–ø–∫–∞ –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞–∂–∞—Ç–∞, –∏—â–µ–º —Ñ–æ—Ä–º—É –∑–∞—è–≤–∫–∏...")
            
            submit_result = self._submit_application_form()
            
            if submit_result == SubmissionResult.SUCCESS:
                logger.info("‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
                return ApplicationResult(
                    vacancy_id="", vacancy_name=vacancy_name, success=True
                )
            elif submit_result == SubmissionResult.SKIPPED:
                logger.warning("‚ö†Ô∏è –í–∞–∫–∞–Ω—Å–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞ (–Ω–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞)")
                return ApplicationResult(
                    vacancy_id="",
                    vacancy_name=vacancy_name,
                    success=False,
                    skipped=True,
                    error_message="–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (–≤–æ–∑–º–æ–∂–Ω–æ —Ç–µ—Å—Ç–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è)",
                )
            else:  # FAILED
                logger.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ")
                return ApplicationResult(
                    vacancy_id="",
                    vacancy_name=vacancy_name,
                    success=False,
                    error_message="–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ",
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∞—á–µ –∑–∞—è–≤–∫–∏: {e}")
            return ApplicationResult(
                vacancy_id="",
                vacancy_name=vacancy_name,
                success=False,
                error_message=str(e),
            )

    def _find_apply_button(self):
        """–ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ç–∫–ª–∏–∫–∞"""
        for selector in self.APPLY_SELECTORS:
            try:
                button = self.driver.find_element(By.CSS_SELECTOR, selector)
                return button
            except NoSuchElementException:
                continue
        return None

    def _is_already_applied(self, button_text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –æ—Ç–∫–ª–∏–∫–∞–ª–∏—Å—å –ª–∏ —É–∂–µ"""
        return any(
            indicator in button_text for indicator in self.ALREADY_APPLIED_INDICATORS
        )

    def _submit_application_form(self) -> SubmissionResult:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ"""
        try:
            modal_selectors = [
                '[data-qa="modal-overlay"]',
                '.magritte-modal-overlay',
                '[data-qa="modal"]',
                '[data-qa="vacancy-response-popup"]',
                '.vacancy-response-popup',
                '.modal',
                '.bloko-modal',
            ]
            
            submit_selectors = [
                '[data-qa="vacancy-response-submit-popup"]',
                'button[form="RESPONSE_MODAL_FORM_ID"]',
                'button[type="submit"][form="RESPONSE_MODAL_FORM_ID"]',
                '[data-qa="vacancy-response-letter-submit"]',
                'button[data-qa*="submit"]',
                'button[type="submit"]',
                'input[type="submit"]',
                '.bloko-button[data-qa*="submit"]',
            ]

            modal_found = False
            for selector in modal_selectors:
                try:
                    modal = WebDriverWait(self.driver, 5).until(
                        EC.presence_of_element_located((By.CSS_SELECTOR, selector))
                    )
                    if modal:
                        modal_found = True
                        logger.info(f"–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞–π–¥–µ–Ω–æ: {selector}")
                        break
                except Exception:
                    continue

            if not modal_found:
                logger.warning("‚ö†Ô∏è –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏—é (–≤–æ–∑–º–æ–∂–Ω–æ —Ç–µ—Å—Ç–æ–≤–∞—è –∏–ª–∏ –æ—à–∏–±–∫–∞)")
                return SubmissionResult.SKIPPED

            form_selectors = [
                'form[name="vacancy_response"]',
                'form[id="RESPONSE_MODAL_FORM_ID"]',
                'form[data-qa*="response"]',
            ]
            
            form_found = False
            for form_selector in form_selectors:
                try:
                    form = self.driver.find_element(By.CSS_SELECTOR, form_selector)
                    if form:
                        form_found = True
                        logger.info(f"–§–æ—Ä–º–∞ –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞–π–¥–µ–Ω–∞: {form_selector}")
                        break
                except Exception:
                    continue
                    
            if not form_found:
                logger.warning("–§–æ—Ä–º–∞ –æ—Ç–∫–ª–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return SubmissionResult.SKIPPED

            time.sleep(1)

            for selector in submit_selectors:
                try:
                    submit_button = WebDriverWait(self.driver, 3).until(
                        EC.element_to_be_clickable((By.CSS_SELECTOR, selector))
                    )
                    if submit_button:
                        logger.info(f"–ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏: {submit_button.text.strip()}")
                        self.driver.execute_script("arguments[0].click();", submit_button)
                        time.sleep(3)
                        if self._check_success_message():
                            return SubmissionResult.SUCCESS
                        else:
                            return SubmissionResult.FAILED
                except Exception:
                    continue

            logger.warning("–ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return SubmissionResult.FAILED

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ: {e}")
            return SubmissionResult.FAILED

    def _check_success_message(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏"""
        try:
            success_indicators = [
                "–æ—Ç–∫–ª–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω",
                "–∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞", 
                "—É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
                "—Å–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∫–ª–∏–∫",
                "–≤–∞—à –æ—Ç–∫–ª–∏–∫ –ø–æ–ª—É—á–µ–Ω",
                "response sent",
                "–æ—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω",
                "—Ä–µ–∑—é–º–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
                "–æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é",
            ]
            
            success_selectors = [
                '[data-qa*="success"]',
                '[data-qa*="sent"]',
                '.success-message',
                '.response-sent',
                '[class*="success"]',
            ]
            
            for selector in success_selectors:
                try:
                    success_element = self.driver.find_element(By.CSS_SELECTOR, selector)
                    if success_element and success_element.is_displayed():
                        logger.info(f"–ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {selector} - {success_element.text}")
                        return True
                except Exception:
                    continue
            
            page_text = self.driver.page_source.lower()
            
            for indicator in success_indicators:
                if indicator in page_text:
                    logger.info(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: '{indicator}'")
                    return True
            
            current_url = self.driver.current_url
            if "sent" in current_url or "success" in current_url or "response" in current_url:
                logger.info(f"URL —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É: {current_url}")
                return True
                
            modal_disappeared = True
            try:
                self.driver.find_element(By.CSS_SELECTOR, '[data-qa="modal-overlay"]')
                modal_disappeared = False
            except NoSuchElementException:
                pass
                
            if modal_disappeared:
                logger.info("–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏—Å—á–µ–∑–ª–æ - –≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–∫–ª–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                return True
                
            logger.info("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ø–µ—Ö–∞: {e}")
            return False


class BrowserService:
    """–ì–ª–∞–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–æ–º –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""

    def __init__(self):
        self.driver: Optional[webdriver.Chrome] = None
        self.wait: Optional[WebDriverWait] = None
        self._is_authenticated = False
        self.auth_handler: Optional[AuthenticationHandler] = None
        self.applicator: Optional[VacancyApplicator] = None

    def initialize(self, headless: bool = None) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞"""
        if headless is None:
            headless = settings.browser.headless

        try:
            logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞...")

            options = BrowserInitializer.create_chrome_options(headless)
            service = Service(ChromeDriverManager().install())

            self.driver = webdriver.Chrome(service=service, options=options)
            self.wait = WebDriverWait(self.driver, settings.browser.wait_timeout)

            self.auth_handler = AuthenticationHandler(self.driver)
            self.applicator = VacancyApplicator(self.driver)

            BrowserInitializer.hide_automation(self.driver)

            logger.info("–ë—Ä–∞—É–∑–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            return False

    def authenticate_interactive(self) -> bool:
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ HH.ru"""
        if not self.driver or not self.auth_handler:
            logger.error("–ë—Ä–∞—É–∑–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False

        success = self.auth_handler.authenticate_interactive()
        if success:
            self._is_authenticated = True
        return success

    def apply_to_vacancy(
        self, vacancy_url: str, vacancy_name: str
    ) -> ApplicationResult:
        """–ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é"""
        if not self.is_ready():
            return ApplicationResult(
                vacancy_id="",
                vacancy_name=vacancy_name,
                success=False,
                error_message="–ë—Ä–∞—É–∑–µ—Ä –Ω–µ –≥–æ—Ç–æ–≤ –∏–ª–∏ –Ω–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
            )

        return self.applicator.apply_to_vacancy(vacancy_url, vacancy_name)

    def add_random_pause(self) -> None:
        """–°–ª—É—á–∞–π–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏"""
        try:
            pause_time = random.uniform(
                settings.application.pause_min, settings.application.pause_max
            )
            logger.info(f"–ü–∞—É–∑–∞ {pause_time:.1f} —Å–µ–∫...")
            time.sleep(pause_time)
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—É–∑—ã: {e}")
            time.sleep(3)

    def close(self) -> None:
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞"""
        try:
            if self.driver:
                self.driver.quit()
                logger.info("–ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏: {e}")
        finally:
            self.driver = None
            self.wait = None
            self._is_authenticated = False
            self.auth_handler = None
            self.applicator = None

    def is_ready(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Ä–∞–±–æ—Ç–µ"""
        return (
            self.driver is not None
            and self._is_authenticated
            and self.applicator is not None
        )
