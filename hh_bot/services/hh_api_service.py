"""
üîç –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API HH.ru
"""

import requests
import time
from typing import List, Dict, Any, Optional
import traceback

from ..config.settings import settings, AppConstants
from ..models.vacancy import Vacancy, SearchStats


class VacancySearcher:
    """–û—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞ –ø–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π"""

    def __init__(self):
        self.base_url = AppConstants.HH_BASE_URL
        self.headers = {"User-Agent": "HH-Search-Bot/2.0 (job-search-automation)"}

    def search(self, keywords: Optional[str] = None) -> List[Vacancy]:
        """–ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π —á–µ—Ä–µ–∑ API"""
        if keywords:
            settings.update_search_keywords(keywords)

        print(f"üîç –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π: {settings.hh_search.keywords}")
        all_vacancies = []

        try:
            for page in range(settings.hh_search.max_pages):
                print(f"üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page + 1}...")

                page_vacancies = self._fetch_page(page)
                if not page_vacancies:
                    print(f"‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –ø—É—Å—Ç–∞, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–∏—Å–∫")
                    break

                all_vacancies.extend(page_vacancies)
                print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(page_vacancies)} –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page + 1}")

                time.sleep(AppConstants.API_PAUSE_SECONDS)

            print(f"\nüìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {len(all_vacancies)} –≤–∞–∫–∞–Ω—Å–∏–π")
            return all_vacancies

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π: {e}")
            print(f"üîç Traceback: {traceback.format_exc()}")
            return []

    def _fetch_page(self, page: int) -> List[Vacancy]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        params = self._build_search_params(page)

        try:
            response = requests.get(
                f"{self.base_url}/vacancies",
                params=params,
                headers=self.headers,
                timeout=AppConstants.DEFAULT_TIMEOUT,
            )
            response.raise_for_status()

            data = response.json()
            items = data.get("items", [])

            vacancies = []
            for item in items:
                try:
                    vacancy = Vacancy.from_api_response(item)
                    vacancies.append(vacancy)
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–∞–∫–∞–Ω—Å–∏–∏: {e}")
                    continue

            return vacancies

        except requests.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API HH.ru: {e}")
            return []
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
            return []

    def _build_search_params(self, page: int) -> Dict[str, str]:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞"""
        config = settings.hh_search
        search_query = QueryBuilder.build_search_query(config.keywords)

        params = {
            "text": search_query,
            "area": config.area,
            "experience": config.experience,
            "per_page": str(config.per_page),
            "page": str(page),
            "order_by": config.order_by,
            "employment": "full,part",
            "schedule": "fullDay,remote,flexible",
            "only_with_salary": "false",
        }

        return params


class QueryBuilder:
    """–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""

    @staticmethod
    def build_search_query(keywords: str) -> str:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —É–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        base_queries = [
            keywords,
            f"{keywords} junior",
            f"{keywords} —Å—Ç–∞–∂–µ—Ä",
            f"{keywords} –Ω–∞—á–∏–Ω–∞—é—â–∏–π",
            f"{keywords} –±–µ–∑ –æ–ø—ã—Ç–∞",
        ]
        return " OR ".join(f"({query})" for query in base_queries)

    @staticmethod
    def suggest_keywords(base_keyword: str = "python") -> List[str]:
        """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞"""
        return [
            f"{base_keyword} junior",
            f"{base_keyword} —Å—Ç–∞–∂–µ—Ä",
            f"{base_keyword} django",
            f"{base_keyword} flask",
            f"{base_keyword} fastapi",
            f"{base_keyword} web",
            f"{base_keyword} backend",
            f"{base_keyword} —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
            f"{base_keyword} developer",
            f"{base_keyword} –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç",
        ]


class VacancyFilter:
    """–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –≤–∞–∫–∞–Ω—Å–∏–π"""

    EXCLUDE_KEYWORDS = [
        "senior",
        "lead",
        "—Å—Ç–∞—Ä—à–∏–π",
        "–≤–µ–¥—É—â–∏–π",
        "–≥–ª–∞–≤–Ω—ã–π",
        "team lead",
        "tech lead",
        "–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä",
        "head",
        "—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å",
        "manager",
        "director",
    ]

    @staticmethod
    def filter_suitable(vacancies: List[Vacancy]) -> List[Vacancy]:
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π"""
        suitable = []

        for vacancy in vacancies:
            if VacancyFilter._is_suitable_basic(vacancy):
                suitable.append(vacancy)

        print(f"‚úÖ –ü–æ—Å–ª–µ –±–∞–∑–æ–≤–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {len(suitable)} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π")
        return suitable

    @staticmethod
    def _is_suitable_basic(vacancy: Vacancy) -> bool:
        """–ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ö–æ–¥—è—â–µ—Å—Ç–∏ –≤–∞–∫–∞–Ω—Å–∏–∏"""

        if not vacancy.has_python():
            print(f"‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º '{vacancy.name}' - –Ω–µ—Ç Python")
            return False

        text = vacancy.get_full_text().lower()
        for exclude in VacancyFilter.EXCLUDE_KEYWORDS:
            if exclude in text:
                print(f"‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º '{vacancy.name}' - —Å–æ–¥–µ—Ä–∂–∏—Ç '{exclude}'")
                return False

        if vacancy.archived:
            print(f"‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º '{vacancy.name}' - –∞—Ä—Ö–∏–≤–Ω–∞—è")
            return False

        print(f"‚úÖ –ü–æ–¥—Ö–æ–¥—è—â–∞—è –≤–∞–∫–∞–Ω—Å–∏—è: '{vacancy.name}'")
        return True


class VacancyDetailsFetcher:
    """–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞–∫–∞–Ω—Å–∏—è—Ö"""

    def __init__(self):
        self.base_url = AppConstants.HH_BASE_URL
        self.headers = {"User-Agent": "HH-Search-Bot/2.0 (job-search-automation)"}

    def get_details(self, vacancy_id: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞–∫–∞–Ω—Å–∏–∏"""
        try:
            response = requests.get(
                f"{self.base_url}/vacancies/{vacancy_id}",
                headers=self.headers,
                timeout=AppConstants.DEFAULT_TIMEOUT,
            )
            response.raise_for_status()
            return response.json()

        except requests.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏ {vacancy_id}: {e}")
            return None


class HHApiService:
    """–ì–ª–∞–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API HH.ru"""

    def __init__(self):
        self.searcher = VacancySearcher()
        self.filter = VacancyFilter()
        self.details_fetcher = VacancyDetailsFetcher()
        self.stats = SearchStats()

    def search_vacancies(self, keywords: Optional[str] = None) -> List[Vacancy]:
        """–ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
        vacancies = self.searcher.search(keywords)
        self.stats.total_found = len(vacancies)
        return vacancies

    def filter_suitable_vacancies(
        self, vacancies: List[Vacancy], use_basic_filter: bool = True
    ) -> List[Vacancy]:
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π"""
        if not use_basic_filter:
            return vacancies

        suitable = self.filter.filter_suitable(vacancies)
        self.stats.filtered_count = len(suitable)
        return suitable

    def get_vacancy_details(self, vacancy_id: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞–∫–∞–Ω—Å–∏–∏"""
        return self.details_fetcher.get_details(vacancy_id)

    def get_search_stats(self) -> SearchStats:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–∏—Å–∫–∞"""
        return self.stats

    def reset_stats(self) -> None:
        """–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self.stats = SearchStats()

    def suggest_keywords(self, base_keyword: str = "python") -> List[str]:
        """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞"""
        return QueryBuilder.suggest_keywords(base_keyword)
