"""
‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è HH.ru –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
"""

import os
from dataclasses import dataclass
from pathlib import Path


class AppConstants:
    """–ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""

    HH_BASE_URL = "https://api.hh.ru"
    HH_SITE_URL = "https://hh.ru"
    GEMINI_BASE_URL = "https://generativelanguage.googleapis.com/v1beta"
    GEMINI_MODEL = "gemini-2.0-flash"

    DEFAULT_TIMEOUT = 30
    API_PAUSE_SECONDS = 0.5
    AI_REQUEST_PAUSE = 1

    MAX_VACANCIES_PER_PAGE = 50
    MAX_SEARCH_PAGES = 5
    DEFAULT_MAX_APPLICATIONS = 40

    DEFAULT_EXPERIENCE_FILE = "data/experience.txt"
    DEFAULT_ABOUT_FILE = "data/about_me.txt"
    DEFAULT_SKILLS_FILE = "data/skills.txt"

    DEFAULT_AI_THRESHOLD = 0.7
    MIN_AI_SCORE = 0.0
    MAX_AI_SCORE = 1.0

    SHORT_SEPARATOR_LENGTH = 50
    LONG_SEPARATOR_LENGTH = 60
    SHORT_TEXT_LIMIT = 50
    MEDIUM_TEXT_LIMIT = 60

    GEMINI_TEMPERATURE = 0.3
    GEMINI_MAX_OUTPUT_TOKENS = 1000

    LOG_FILE_MAX_SIZE_MB = 10
    PERCENT_MULTIPLIER = 100


@dataclass
class HHSearchConfig:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π"""

    keywords: str = "python junior"
    area: str = "1"
    experience: str = "noExperience"
    per_page: int = AppConstants.MAX_VACANCIES_PER_PAGE
    max_pages: int = 3
    order_by: str = "publication_time"


@dataclass
class BrowserConfig:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞"""

    headless: bool = False
    wait_timeout: int = 15
    page_load_timeout: int = 30
    implicit_wait: int = 10


@dataclass
class ApplicationConfig:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫"""

    max_applications: int = AppConstants.DEFAULT_MAX_APPLICATIONS
    pause_min: float = 3.0
    pause_max: float = 6.0
    manual_login: bool = True


@dataclass
class GeminiConfig:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Gemini AI"""

    api_key: str = ""
    model: str = AppConstants.GEMINI_MODEL
    base_url: str = AppConstants.GEMINI_BASE_URL
    match_threshold: float = AppConstants.DEFAULT_AI_THRESHOLD


@dataclass
class ResumeConfig:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∑—é–º–µ"""

    experience_file: str = AppConstants.DEFAULT_EXPERIENCE_FILE
    about_me_file: str = AppConstants.DEFAULT_ABOUT_FILE
    skills_file: str = AppConstants.DEFAULT_SKILLS_FILE


class ResumeFileManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ —Ä–µ–∑—é–º–µ"""

    @staticmethod
    def create_sample_files() -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ —Ñ–∞–π–ª–æ–≤ —Ä–µ–∑—é–º–µ"""
        data_dir = Path("data")
        data_dir.mkdir(exist_ok=True)

        experience_file = data_dir / "experience.txt"
        if not experience_file.exists():
            experience_file.write_text(
                """
–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:
- –ò–∑—É—á–∞—é Python —É–∂–µ 6 –º–µ—Å—è—Ü–µ–≤
- –ü—Ä–æ—à–µ–ª –∫—É—Ä—Å—ã –ø–æ –æ—Å–Ω–æ–≤–∞–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
- –î–µ–ª–∞–ª —É—á–µ–±–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã: –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä, –∏–≥—Ä–∞ –≤ –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏
- –ò–∑—É—á–∞—é Django –∏ Flask –¥–ª—è –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
- –ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è SQL –∏ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
- –ó–Ω–∞–∫–æ–º —Å Git –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –≤–µ—Ä—Å–∏–π
""".strip(),
                encoding="utf-8",
            )
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {experience_file}")

        about_file = data_dir / "about_me.txt"
        if not about_file.exists():
            about_file.write_text(
                """
–û —Å–µ–±–µ:
–ù–∞—á–∏–Ω–∞—é—â–∏–π Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —Å –±–æ–ª—å—à–∏–º –∂–µ–ª–∞–Ω–∏–µ–º —É—á–∏—Ç—å—Å—è –∏ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è.
–ò–Ω—Ç–µ—Ä–µ—Å—É—é—Å—å –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π –∏ –∞–Ω–∞–ª–∏–∑–æ–º –¥–∞–Ω–Ω—ã—Ö.
–ë—ã—Å—Ç—Ä–æ –æ–±—É—á–∞—é—Å—å, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ –ø–æ–¥—Ö–æ–∂—É –∫ —Ä–∞–±–æ—Ç–µ.
–ì–æ—Ç–æ–≤ –∫ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–µ –∏–ª–∏ junior –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞.
–•–æ—á—É —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥–µ –æ–ø—ã—Ç–Ω—ã—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏ –≤–Ω–æ—Å–∏—Ç—å –≤–∫–ª–∞–¥ –≤ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã.
""".strip(),
                encoding="utf-8",
            )
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {about_file}")

        skills_file = data_dir / "skills.txt"
        if not skills_file.exists():
            skills_file.write_text(
                """
–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏:
- Python (–æ—Å–Ω–æ–≤—ã, –û–û–ü, –º–æ–¥—É–ª–∏)
- SQL (SELECT, JOIN, –±–∞–∑–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã)
- Git (commit, push, pull, merge)
- HTML/CSS (–±–∞–∑–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è)
- Django (—É—á–µ–±–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã)
- Flask (–º–∏–∫—Ä–æ—Ñ—Ä–µ–π–º–≤–æ—Ä–∫)
- PostgreSQL, SQLite
- Linux (–±–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã)
- VS Code, PyCharm
""".strip(),
                encoding="utf-8",
            )
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {skills_file}")


class UIFormatter:
    """–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""

    @staticmethod
    def create_separator(long: bool = False) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏"""
        length = AppConstants.LONG_SEPARATOR_LENGTH if long else AppConstants.SHORT_SEPARATOR_LENGTH
        return "=" * length

    @staticmethod
    def truncate_text(text: str, medium: bool = False) -> str:
        """–û–±—Ä–µ–∑–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–æ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞"""
        limit = AppConstants.MEDIUM_TEXT_LIMIT if medium else AppConstants.SHORT_TEXT_LIMIT
        return text[:limit]

    @staticmethod
    def format_percentage(value: float, total: float) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–≥–æ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è"""
        if total <= 0:
            return "0.0%"
        percentage = (value / total) * AppConstants.PERCENT_MULTIPLIER
        return f"{percentage:.1f}%"

    @staticmethod
    def print_section_header(title: str, long: bool = False) -> None:
        """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å–µ–∫—Ü–∏–∏ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏"""
        separator = UIFormatter.create_separator(long)
        print(f"\n{separator}")
        print(title)
        print(separator)


class Settings:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫"""

    def __init__(self):

        self._load_env()

        self.hh_search = HHSearchConfig()
        self.browser = BrowserConfig()
        self.application = ApplicationConfig()
        self.gemini = GeminiConfig(api_key=os.getenv("GEMINI_API_KEY", ""))
        self.resume = ResumeConfig()

        self._validate_config()

    def _load_env(self) -> None:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        try:
            from dotenv import load_dotenv

            load_dotenv()
        except ImportError:
            print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ python-dotenv –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å .env —Ñ–∞–π–ª–∞–º–∏")

    def _validate_config(self) -> None:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        if not self.gemini.api_key:
            print("‚ö†Ô∏è GEMINI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

        data_dir = Path("data")
        data_dir.mkdir(exist_ok=True)

        logs_dir = Path("logs")
        logs_dir.mkdir(exist_ok=True)

    def update_search_keywords(self, keywords: str) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –ø–æ–∏—Å–∫–∞"""
        self.hh_search.keywords = keywords
        print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {keywords}")

    def enable_ai_matching(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å AI —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ"""
        return bool(self.gemini.api_key)


settings = Settings()
